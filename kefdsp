#!/usr/bin/perl
#
# Copyright (C) 2020, Sebastian Riedel.
#
# This program is free software, you can redistribute it and/or modify it under
# the terms of the Artistic License version 2.0
#
use strict;
use warnings;
use 5.10.1;

use File::Spec;
use Getopt::Long 'GetOptions';
use IO::Socket::INET;

use constant DEBUG => $ENV{KEFDSP_DEBUG} || 0;

our $VERSION = '1.01';

my $GET_MODE      = "\x47\x27\x80";
my $GET_DESK_DB   = "\x47\x28\x80";
my $GET_WALL_DB   = "\x47\x29\x80";
my $GET_TREBLE_DB = "\x47\x2a\x80";
my $GET_HIGH_HZ   = "\x47\x2b\x80";
my $GET_LOW_HZ    = "\x47\x2c\x80";
my $GET_SUB_DB    = "\x47\x2d\x80";

my $DESK_WALL_DB = [
  '-6.0', '-5.5', '-5.0', '-4.5', '-4.0', '-3.5', '-3.0', '-2.5',
  '-2.0', '-1.5', '-1.0', '-0.5', '0'
];
my $TREBLE_DB
  = ['-2.0', '-1.5', '-1.0', '-0.5', '0', '+0.5', '+1.0', '+1.5', '+2.0'];
my $HIGH_HZ = [50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100, 105, 110, 115, 120];
my $LOW_HZ  = [
  40,  45,  50,  55,  60,  65,  70,  75,  80,  85,  90,  95,
  100, 105, 110, 115, 120, 125, 130, 135, 140, 145, 150, 155,
  160, 165, 170, 175, 180, 185, 190, 195, 200, 205, 210, 215,
  220, 225, 230, 235, 240, 245, 250
];
my $SUB_DB = [
  '-10.0', '-9.0', '-8.0', '-7.0', '-6.0', '-5.0', '-4.0', '-3.0',
  '-2.0',  '-1.0', '0',    '+1.0', '+2.0', '+3.0', '+4.0', '+5.0',
  '+6.0',  '+7.0', '+8.0', '+9.0', '+10.0'
];

# Config file
my $HOST = '192.168.178.42';
if (-r (my $config = File::Spec->catfile($ENV{HOME}, '.kefctl'))) {
  open my $fh, '<', $config or die "Can't open file: $!";
  $HOST = <$fh>;
  chomp $HOST;
}

Getopt::Long::Configure(qw(default no_auto_abbrev no_ignore_case));
GetOptions
  'd|desk=s'         => \my $desk,
  'D|desk-mode=s'    => \my $desk_mode,
  'e|sub-ext=s'      => \my $ext,
  'g|sub-gain=s'     => \my $gain,
  'h|help'           => \my $help,
  'H|host=s'         => \$HOST,
  'i|high=s'         => \my $high,
  'I|high-pass=s'    => \my $high_pass,
  'l|low=s'          => \my $low,
  'p|port=s'         => \(my $port = 50001),
  'P|phase=s'        => \my $phase,
  'r|request=s'      => \my $request,
  's|status'         => \my $status,
  'S|sub-polarity=s' => \my $pol,
  't|treble=s'       => \my $treble,
  'version'          => \my $version,
  'w|wall=s'         => \my $wall,
  'W|wall-mode=s'    => \my $wall_mode;

# Usage
if ($help) { _usage() }

# Version
elsif ($version) { say "kefdsp $VERSION" }

# Arbitrary request in hex (for testing)
elsif ($request) { say unpack 'H*', _command(pack('H*', $request)) }

# Mode changes
elsif ($desk_mode || $wall_mode || $phase || $high_pass || $pol || $ext) {
  my $mode_bits = unpack 'B*', substr(_command($GET_MODE), 3, 1);

  $mode_bits = _set_switch($mode_bits, 7, $desk_mode);
  $mode_bits = _set_switch($mode_bits, 6, $wall_mode);
  $mode_bits = _set_switch($mode_bits, 5, $phase);
  $mode_bits = _set_switch($mode_bits, 4, $high_pass);
  $mode_bits = _set_switch($mode_bits, 1, $pol);

  if ($ext && ($ext = lc $ext)) {
    if    ($ext eq 'standard') { substr $mode_bits, 2, 2, '00' }
    elsif ($ext eq 'less')     { substr $mode_bits, 2, 2, '10' }
    elsif ($ext eq 'extra')    { substr $mode_bits, 2, 2, '01' }
  }

  my $mode = pack 'B*', $mode_bits;
  _command("\x53\x27\x81$mode");
}

# Desk
elsif (defined $desk) { _set_slider("\x28", $DESK_WALL_DB, $desk) }

# Wall
elsif (defined $wall) { _set_slider("\x29", $DESK_WALL_DB, $wall) }

# Treble
elsif (defined $treble) { _set_slider("\x2a", $TREBLE_DB, $treble) }

# High-pass
elsif (defined $high) { _set_slider("\x2b", $HIGH_HZ, $high) }

# Low-pass
elsif (defined $low) { _set_slider("\x2c", $LOW_HZ, $low) }

# Sub gain
elsif (defined $gain) { _set_slider("\x2d", $SUB_DB, $gain) }

# Status information (should be complete)
elsif ($status) {
  my $mode_bits = unpack 'B*', substr(_command($GET_MODE), 3, 1);
  warn "*** MODE: $mode_bits\n" if DEBUG;
  my $desk_mode        = substr($mode_bits, 7, 1) ? 'On' : 'Off';
  my $wall_mode        = substr($mode_bits, 6, 1) ? 'On' : 'Off';
  my $phase_correction = substr($mode_bits, 5, 1) ? 'On' : 'Off';
  my $high_pass        = substr($mode_bits, 4, 1) ? 'On' : 'Off';
  my $sub_polarity     = substr($mode_bits, 1, 1) ? '-'  : '+';

  my $sub_ext_bits = substr($mode_bits, 2, 2);
  my $sub_ext      = 'Unknown';
  if    ($sub_ext_bits eq '00') { $sub_ext = 'Standard' }
  elsif ($sub_ext_bits eq '10') { $sub_ext = 'Less' }
  elsif ($sub_ext_bits eq '01') { $sub_ext = 'Extra' }

  my $desk_db   = _get_slider($GET_DESK_DB,   $DESK_WALL_DB);
  my $wall_db   = _get_slider($GET_WALL_DB,   $DESK_WALL_DB);
  my $treble_db = _get_slider($GET_TREBLE_DB, $TREBLE_DB);
  my $high_hz   = _get_slider($GET_HIGH_HZ,   $HIGH_HZ);
  my $low_hz    = _get_slider($GET_LOW_HZ,    $LOW_HZ);
  my $sub_db    = _get_slider($GET_SUB_DB,    $SUB_DB);

  say "Desk mode:        $desk_mode ($desk_db dB)";
  say "Wall mode:        $wall_mode ($wall_db dB)";
  say "Treble trim:      $treble_db dB";
  say "Phase correction: $phase_correction";
  say "Bass extension:   $sub_ext";
  say "High-pass mode:   $high_pass ($high_hz Hz)";
  say "Sub out low-pass: $low_hz Hz";
  say "Sub gain:         $sub_db dB";
  say "Sub polarity:     $sub_polarity";
}

# Usage
else { _usage() }

sub _command {
  my $req = shift;

  state $sock = IO::Socket::INET->new(
    PeerHost => $HOST,
    PeerPort => $port,
    Type     => SOCK_STREAM,
  ) or die "Cannot construct socket: $@";

  warn "*** REQ: @{[unpack 'H*', $req]}\n" if DEBUG;
  $sock->syswrite($req) or die "Cannot write command: $!";
  die "Could not read command response: $!"
    unless defined(my $read = $sock->sysread(my $res, 1024, 0));
  warn "*** RES: @{[unpack 'H*', $res]}\n" if DEBUG;

  return $res;
}

sub _find_val {
  my ($array, $val) = @_;

  my $target;
  for my $i (0 .. $#$array) {
    next unless $val eq $array->[$i];
    $target = $i;
    last;
  }

  return $target;
}

sub _get_slider {
  my ($command, $array) = @_;
  my $int = unpack 'C', substr(_command($command), 3, 1);
  return $array->[$int - 128] // 'Unknown';
}

sub _set_slider {
  my ($op, $array, $val) = @_;
  die "Unknown value: $val\n" unless my $to = _find_val($array, $val);
  _command("\x53$op\x81" . pack('C', $to));
}

sub _set_switch {
  my ($bits, $offset, $val) = @_;

  return $bits unless $val;

  $val = lc $val;
  if    ($val eq 'on' || $val eq '-')  { substr $bits, $offset, 1, '1' }
  elsif ($val eq 'off' || $val eq '+') { substr $bits, $offset, 1, '0' }
  else                                 { die "Unknown value: $val\n" }

  return $bits;
}

sub _usage {
  say <<'EOF';
Usage: kefdsp [OPTIONS]

    kefdsp --status
    kefdsp --desk-mode on
    kefdsp --wall-mode off
    kefdsp --desk -3.5
    kefdsp --wall -6.0
    kefdsp --treble 0
    kefdsp --high 95
    kefdsp --low 80
    kefdsp -l 80
    kefdsp -e less
    kefdsp -H 192.168.178.52 -p 50001 -g +5.0
    kefdsp -r 5330819b0bb

  Options:
    -d, --desk <db>             Set dB value for desk mode, between -6.0 and 0
                                in steps of 0.5
    -D, --desk-mode <mode>      Set desk mode on or off
    -e, --sub-ext <mode>        Set sub extension mode to less, standard or
                                extra
    -g, --sub-gain <db>         Set dB value for sub gain, between -10.0 and
                                +10.0 in steps of 1.0
    -h, --help                  Show this summary of available options
    -H, --host <host>           Speaker host, defaults to 192.168.178.42
    -i, --high <hz>             Set Hz value for high-pass mode, between 50 and
                                120 in steps of 5
    -I, --high-pass <mode>      Set high pass mode on or off
    -l, --low <hz>              Set Hz value for sub out low-pass, between 40
                                and 250 in steps of 5
    -p, --port <port>           Speaker port, defaults to 50001
    -P, --phase <mode>          Set phase correction on or off
    -r, --request <hex>         Send raw request in hex format and show response
                                (very useful for testing speaker features)
    -s, --status                Show current DSP status
    -S, --sub-polarity <mode>   Set sub polarity to - or +
    -t, --treble <db>           Set dB value for treble trim, between -2.0 and
                                +2.0 in steps of 0.5.
    -w, --wall <db>             Set dB value for wall mode, between -6.0 and 0
        --version               Show version
                                in steps of 0.5
    -W, --wall-mode <mode>      Set wall mode on or off

  You can also set the KEFDSP_DEBUG environment variable to get diagnostics
  information printed to STDERR.
EOF
}
